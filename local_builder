#!/bin/bash
#
# Copyright (C) 2023 Giovanni Gualtieri <giovix92@giovix92.com>
#
# SPDX-License-Identifier: Apache-2.0
#

# Script version
version="v1.7"

# Main variables, can be overridden by any config file or directly here
ROM_NAME="placeholder"           # Example, "lineage"
ROM_FULL_NAME="placeholder"      # Example, "LineageOS"
ROM_VERSION="placeholder"        # Example, "20"
ANDROID_VERSION="placeholder"    # Example, "13"
BUILD_VARIANT="placeholder"      # Example, "userdebug"
ZIP_NAME="placeholder"           # Example, "lineage*$ROM_VERSION*$(date +%Y%m%d)*$DEVICE*.zip"
DEVICE="placeholder"             # Example, "ingres"
TARGET="placeholder"             # Example, "bacon"

# Extra variables, can be overridden by extras.config or directly here
# Remember to set TELEGRAM_BOT_TOKEN and CHAT_ID manually!
BUILD_DIR=""
JOBS=$(nproc --all)
CLEAN=false
INSTALLCLEAN=false
SIDELOAD=true
ONLYCLEAN=false
SHUTDOWN=false
WITH_GAPPS=false
TELEGRAM=true
SLEEP=2

header() {
    echo "[i] Giovix92's local ROM builder, $version."
}

# Shows program usage
show_usage() {
    header
    echo """
Usage:
--project      or -p  : Imports a custom configuration file, if present
--installclean or -ic : Does an mka installclean before building
--clean        or -c  : Cleans before build
--buildvariant or -b  : Defines build variant (eng, userdebug or user)
--device       or -d  : Defines the device codename
--target       or -t  : Defines the build target (default: bacon)
--jobs         or -j  : Defines how many CPU cores shall be used
--shutdown     or -s  : Enables shutdown when build ends.
--no-sideload  or -ns : Disables ZIP sideload after building
--run-sideload or -rs : Runs sideload only, then exits
--no-run       or -nr : Cleans only
--with-gms     or -wg : Add GApps in the build
--no-tg        or -nt : Disable telegram messages
"""
    exit
}

# Checks if input is correct, otherwise it just exits.
sanitize_input() {
    [[ $1 =~ .*"--".* ]] && show_usage
}

# Checks if any variable has "placeholder" in it
sanitize_variables() {
    for i in ROM_NAME ROM_FULL_NAME ROM_VERSION ANDROID_VERSION DEVICE BUILD_VARIANT ZIP_NAME TARGET; do
        if [[ ${!i} == placeholder ]]; then
            echo "[!] Hey there! Did you change your variables or import a project? Looks to me you didn't."
            exit
        fi
    done
}

# Checks if there is any config file
check_configs() {
    builder_path=$(dirname $(realpath -s $0))
    for i in $(find $builder_path/configs/ -type f -name "*.config"); do
        if [[ ! -z $1 && $i =~ $1 ]]; then
            source $i
            echo "[i] Importing $1.config file"
            return
        elif [[ $i =~ "extras" ]]; then
            source $i
            echo "[i] Found extras.config, importing it."
            return
        fi
    done
}

# Checks if the PC shall be shut off after building
check_shutdown() {
    [[ $SHUTDOWN == true ]] && systemctl poweroff -i || return
}

# Send a new telegram message
tg_msg() {
    SEND_LOG=true
    [[ ! -n $TELEGRAM_BOT_TOKEN || ! -n $CHAT_ID ]] && echo "[!] Telegram variables aren't set, not sending messages." && return
    
    message="""
\ðŸ›  CI \| $ROM_FULL_NAME $ROM_VERSION \($ANDROID_VERSION\)
Device: $DEVICE
Lunch flavor: $ROM_NAME\_$DEVICE-$BUILD_VARIANT
Build type: CI
With GMS: $WITH_GAPPS
"""
    if [[ $MESSAGE_ID -ne 0 ]]; then
        if [[ $(cat out/error.log) == "" && $result -ne 0 ]]; then
            message+="\nStatus: Build aborted manually"
            SEND_LOG=false
        else
            case $result in
                0)
                    message+="\nStatus: Build finished"
                    ;;
                *)
                    message+="\nStatus: Build failed"
                    ;;
            esac
        fi

        curl -s -X POST \
             -H 'Content-Type: application/json' \
             -d '{"chat_id": "'"$CHAT_ID"'", "text": "'"$message"'", "message_id": "'"$((MESSAGE_ID))"'"}' \
             "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/editMessageText" > /dev/null

        if [[ $SEND_LOG == true ]]; then
            curl -s -F document=@"out/error.log" \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument?chat_id=$CHAT_ID" > /dev/null
        fi
    else
        message+="\nStatus: Building"
        MESSAGE_ID=$(curl -s -X POST \
            -H 'Content-Type: application/json' \
            -d '{"chat_id": "'"$((CHAT_ID))"'", "text": "'"$message"'"}' \
            https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage | jq '.result.message_id')
        return
    fi
}

# Sideloads the built zip file, if any.
sideload_rom() {
    if [[ $result -eq 0 && $SIDELOAD == true ]]; then
        file=$(ls out/target/product/$DEVICE/$ZIP_NAME | head -n1)
        [[ $file == "" ]] && echo "[!] Couldn't find zip file! Aborting sideload." && exit
        echo "[i] Sideloading $file..."
        adb wait-for-device reboot sideload
        adb wait-for-sideload
        sleep 10
        adb wait-for-sideload sideload $file
        adb wait-for-recovery reboot
        echo "[i] Sideload finished, rebooting."
    else
        echo "[!] Sideload cancelled."
    fi
}

# Show header and check for extras.config
header
check_configs

# Loop through every passed argument, if any
while [[ ! -z $1 ]]; do
    case $1 in
        --project|-p)
            shift
            check_configs $1
            ;;
        --device|-d)
            shift
            sanitize_input $1
            DEVICE=$1
            ;;
        --buildvariant|-b)
            shift
            sanitize_input $1
            BUILD_VARIANT=$1
            ;;
        --target|-t)
            shift
            sanitize_input $1
            TARGET=$1
            ;;
        --clean|-c)
            CLEAN=true
            ;;
        --installclean|-ic)
            INSTALLCLEAN=true
            ;;
        --shutdown|-s)
            SHUTDOWN=true
            ;;
        --jobs|-j)
            shift
            sanitize_input $1
            JOBS=$1
            ;;
        --no-sideload|-ns)
            SIDELOAD=false
            ;;
        --run-sideload|-rs)
            ONLY_SIDELOAD=true
            ;;
        --no-run|-nr)
            ONLYCLEAN=true
            ;;
        --with-gapps|-wg)
            WITH_GAPPS=true
            ;;
        --no-tg|-nt)
            TELEGRAM=false
            ;;
        *)
            show_usage
            ;;
    esac
    shift
done

# Check if variables has been set correctly
sanitize_variables

# Just a little resume about parameters used for this build
echo """[i] Parameters used:
- Clean: $CLEAN
- Onlyclean: $ONLYCLEAN
- Installclean: $INSTALLCLEAN
- Device: $DEVICE
- Build variant: $BUILD_VARIANT
- Target: $TARGET
- Sideload: $SIDELOAD
- Shutdown: $SHUTDOWN
- With gapps: $WITH_GAPPS
- Jobs: $JOBS
- Telegram: $TELEGRAM"""
sleep $SLEEP

# Go into the build directory, if specified.
[[ $BUILD_DIR != "" ]] && cd "$BUILD_DIR/$ROM_FULL_NAME-$ROM_VERSION"

# Prepare the build env
. build/envsetup.sh

# Check if we only need to clean
[[ $ONLYCLEAN == true ]] && mka clean && exit

# Clean/Installclean checks
[[ $CLEAN == true ]] && mka clean
[[ $INSTALLCLEAN == true ]] && mka installclean

# Check if we only need to sideload
[[ $ONLY_SIDELOAD == true ]] && sideload_rom && exit

# Check if we need to produce a gapped-build
[[ $WITH_GAPPS == true ]] && export WITH_GMS=true

# Send telegram message
[[ $TELEGRAM == true ]] && tg_msg

# Lunch + building
lunch $ROM_NAME\_$DEVICE-$BUILD_VARIANT && mka $TARGET -j $JOBS
result=$?

# Temporary fix for 6.x kernels
while :; do
    if [[ $result -ne 0 && $(grep "Dex2oat failed" out/error.log) ]]; then
        mka $TARGET -j $JOBS
        result=$?
    else
        break
    fi
done

# Edit previously sent message with the final result
[[ $TELEGRAM == true ]] && tg_msg

# Shutdown the PC, if necessary
check_shutdown

# Sideload ROM, if necessary
sideload_rom
